To perform unit testing on a Python (Flask) based web application using Selenium, follow these steps:

1. **Install Selenium**:
   - Open your terminal or command prompt.
   - Install Selenium using pip: `pip install selenium`

               
2. **Download WebDriver**:
   - Selenium requires a WebDriver to interact with web browsers. Download the appropriate WebDriver for the browser you want to test against. For example, if you want to test with Google Chrome, download the ChromeDriver from https://sites.google.com/a/chromium.org/chromedriver/downloads
   - Extract the WebDriver executable and place it in a directory included in your system's PATH.

3. **Set up a Test Environment**:
   - Create a new Python file for your test cases, e.g., `test_app.py`.
   - Import the necessary modules:

     ```python
     import unittest
     from selenium import webdriver
     from flask import Flask, render_template
     ```

4. **Create a Test Case Class**:
   - Inherit from `unittest.TestCase` and define your test cases as methods.

     ```python
     class TestApp(unittest.TestCase):

         def setUp(self):
             # Initialize the Flask app and WebDriver
             self.app = Flask(__name__)
             self.driver = webdriver.Chrome()  # Replace with the appropriate WebDriver

         def test_homepage(self):
             # Test the homepage
             self.driver.get("http://localhost:5000/")
             self.assertIn("Welcome", self.driver.page_source)

         def test_another_route(self):
             # Test another route in your Flask app
             self.driver.get("http://localhost:5000/another_route")
             self.assertIn("Another Route", self.driver.page_source)

         def tearDown(self):
             # Close the WebDriver
             self.driver.quit()
     ```

5. **Write Test Cases**:
   - Define test methods within the `TestApp` class.
   - Use WebDriver methods like `get()` to navigate to specific URLs.
   - Use assertion methods like `assertIn()` to verify expected content or behavior.

6. **Run the Tests**:
   - Open your terminal or command prompt.
   - Navigate to the directory containing your test file.
   - Run the tests using the following command:

     ```
     python -m unittest test_app.py
     ```

   - This command will execute all the test cases defined in the `test_app.py` file.

7. **Analyze Test Results**:
   - The test runner will display the results, indicating which tests passed and which failed.
   - If any tests fail, the output will provide information about the failure, including the line of code where the failure occurred and the expected and actual values.

8. **Continuous Integration**:
   - For continuous integration and automated testing, you can integrate your test suite with tools like Jenkins, Travis CI, or GitLab CI/CD.

Note: This is a basic example of unit testing a Flask application with Selenium. In a real-world scenario, you may want to consider additional practices such as:

- Separating test cases into multiple files or modules for better organization.
- Using test fixtures or setup/teardown methods to create and clean up test data or environments.
- Implementing page object models for better test maintenance and reusability.
- Parallelizing tests for faster execution on multiple browsers or environments.
- Integrating with reporting tools for detailed test reports and analytics.

Additionally, it's essential to maintain a balance between unit tests and other types of tests (e.g., integration tests, end-to-end tests) to ensure comprehensive testing of your web application.